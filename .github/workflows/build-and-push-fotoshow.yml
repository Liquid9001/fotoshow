name: Build and Push fotoshow Image

on:
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  # Base (may contain uppercase owner); we'll normalize per job
  IMAGE_NAME_BASE: ghcr.io/${{ github.repository_owner }}/fotoshow

jobs:
  build:
    name: Build (compile and test)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout pipeline repo
        uses: actions/checkout@v4

      - name: Checkout liquid9001/fotoshow source
        uses: actions/checkout@v4
        with:
          repository: liquid9001/fotoshow
          path: fotoshow
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Maven build (package)
        if: ${{ hashFiles('fotoshow/pom.xml') != '' }}
        working-directory: fotoshow
        run: mvn -B -ntp -DskipTests package

      - name: Maven test
        if: ${{ hashFiles('fotoshow/pom.xml') != '' }}
        working-directory: fotoshow
        run: mvn -B -ntp test

      - name: Prepare Docker context (Maven -> Gradle layout shim)
        run: |
          if [ -d "fotoshow/target/quarkus-app" ] && [ ! -d "fotoshow/build/quarkus-app" ]; then
            echo "Copying Maven output (target/quarkus-app) to Gradle layout (build/quarkus-app) for Dockerfile compatibility"
            mkdir -p fotoshow/build/quarkus-app
            cp -a fotoshow/target/quarkus-app/. fotoshow/build/quarkus-app/
          fi

      - name: Upload fotoshow workspace
        uses: actions/upload-artifact@v4
        with:
          name: fotoshow-workspace
          path: fotoshow

  create-image:
    name: Create image (build only)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Normalize image name (lowercase)
        run: echo "IMAGE_NAME=$(echo '${{ env.IMAGE_NAME_BASE }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Download fotoshow workspace
        uses: actions/download-artifact@v4
        with:
          name: fotoshow-workspace
          path: fotoshow

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image to tar (no push)
        uses: docker/build-push-action@v5
        with:
          context: ./fotoshow
          file: ./fotoshow/src/main/docker/Dockerfile.jvm
          no-cache: true
          push: false
          tags: ${{ env.IMAGE_NAME }}:build-${{ github.sha }}
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload built image
        uses: actions/upload-artifact@v4
        with:
          name: built-image
          path: /tmp/image.tar

  push:
    name: Push image to GHCR
    runs-on: ubuntu-latest
    needs: create-image
    steps:
      - name: Normalize image name (lowercase)
        run: echo "IMAGE_NAME=$(echo '${{ env.IMAGE_NAME_BASE }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Download built image
        uses: actions/download-artifact@v4
        with:
          name: built-image
          path: /tmp

      - name: Load, tag and push image
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          set -euo pipefail
          docker load -i /tmp/image.tar
          # TAGS is a newline-separated list from metadata-action; iterate safely
          echo "$TAGS" | while IFS= read -r tag; do
            [ -z "$tag" ] && continue
            echo "Tagging and pushing $tag"
            docker tag "$IMAGE_NAME:build-${GITHUB_SHA}" "$tag"
            docker push "$tag"
          done
